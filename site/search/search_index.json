{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"api-docs/","text":"API Overview Modules features : Functions to take pose tracks and compute a set of features from them io : Loading and saving tracking and behavior annotation files mars_features ml : Machine learning functions video : Basic video tracking and behavior class that houses data Classes features.Features io.BufferedIOBase : Base class for buffered IO objects. io.IOBase : The abstract base class for all I/O classes, acting on streams of io.RawIOBase : Base class for raw binary I/O. io.TextIOBase : Base class for text I/O. io.UnsupportedOperation video.MLDataFrame : DataFrame useful for interfacing between pandas and sklearn. Stores a data video.VideosetDataFrame Functions io.load_data : Load an object from a pickle file io.read_DLC_tracks : Read in tracks from DLC. io.read_boris_annotation : Read behavior annotation from BORIS exported csv file io.rename_df_cols : Rename dataframe columns io.save_DLC_tracks_h5 : Save DLC tracks in h5 format. mars_features.compute_mars_features mars_features.compute_mars_features_ mars_features.make_stacked_features video.clone_metadata : Prepare a metadata dictionary for defining a VideosetDataFrame. This file was automatically generated via lazydocs .","title":"Overview"},{"location":"api-docs/#api-overview","text":"","title":"API Overview"},{"location":"api-docs/#modules","text":"features : Functions to take pose tracks and compute a set of features from them io : Loading and saving tracking and behavior annotation files mars_features ml : Machine learning functions video : Basic video tracking and behavior class that houses data","title":"Modules"},{"location":"api-docs/#classes","text":"features.Features io.BufferedIOBase : Base class for buffered IO objects. io.IOBase : The abstract base class for all I/O classes, acting on streams of io.RawIOBase : Base class for raw binary I/O. io.TextIOBase : Base class for text I/O. io.UnsupportedOperation video.MLDataFrame : DataFrame useful for interfacing between pandas and sklearn. Stores a data video.VideosetDataFrame","title":"Classes"},{"location":"api-docs/#functions","text":"io.load_data : Load an object from a pickle file io.read_DLC_tracks : Read in tracks from DLC. io.read_boris_annotation : Read behavior annotation from BORIS exported csv file io.rename_df_cols : Rename dataframe columns io.save_DLC_tracks_h5 : Save DLC tracks in h5 format. mars_features.compute_mars_features mars_features.compute_mars_features_ mars_features.make_stacked_features video.clone_metadata : Prepare a metadata dictionary for defining a VideosetDataFrame. This file was automatically generated via lazydocs .","title":"Functions"},{"location":"api-docs/features/","text":"module features Functions to take pose tracks and compute a set of features from them Global Variables default_tracking_columns mars_feature_maker cnn_probability_feature_maker class Features method __init__ __init__(feature_maker:Callable, required_columns:list, **kwargs) method make make(vdf, **kwargs) This file was automatically generated via lazydocs .","title":"Features"},{"location":"api-docs/features/#module-features","text":"Functions to take pose tracks and compute a set of features from them","title":"module features"},{"location":"api-docs/features/#global-variables","text":"default_tracking_columns mars_feature_maker cnn_probability_feature_maker","title":"Global Variables"},{"location":"api-docs/features/#class-features","text":"","title":"class Features"},{"location":"api-docs/features/#method-__init__","text":"__init__(feature_maker:Callable, required_columns:list, **kwargs)","title":"method __init__"},{"location":"api-docs/features/#method-make","text":"make(vdf, **kwargs) This file was automatically generated via lazydocs .","title":"method make"},{"location":"api-docs/io/","text":"module io Loading and saving tracking and behavior annotation files Global Variables DEFAULT_BUFFER_SIZE SEEK_SET SEEK_CUR SEEK_END XY_IDS function read_DLC_tracks read_DLC_tracks( fn_in:str, part_renamer:dict=None, animal_renamer:dict=None ) \u2192 tuple Read in tracks from DLC. Args: fn_in : csv file that has DLC tracks part_renamer : dictionary to rename body parts, if needed animal_renamer : dictionary to rename animals, if needed Returns: Pandas DataFrame with (n_animals 2 n_body_parts) columns plus with filename and frame, List of body parts, List of animals, Columns names for DLC tracks function rename_df_cols rename_df_cols(df:DataFrame, renamer:dict) \u2192 DataFrame Rename dataframe columns Args: df : Pandas dataframe whose columns to rename renamer : dictionary whose key:value pairs define the substitutions to make Returns: The dataframe with renamed columns. function save_DLC_tracks_h5 save_DLC_tracks_h5(df:DataFrame, fn_out:str) \u2192 None Save DLC tracks in h5 format. Args: df : Pandas dataframe to save fn_out : Where to save the dataframe function load_data load_data(fn:str) Load an object from a pickle file Args: fn : The filename Returns: The pickled object. function read_boris_annotation read_boris_annotation(fn_in:str, fps:int, duration:float) \u2192 ndarray Read behavior annotation from BORIS exported csv file Args: fn_in : The filename with BORIS behavior annotations to load fps : Frames per second of video duration : Duration of video Returns: A numpy array which indicates, for all frames, if behavior is occuring (1) or not (0) class BufferedIOBase Base class for buffered IO objects. The main difference with RawIOBase is that the read() method supports omitting the size argument, and does not have a default implementation that defers to readinto(). In addition, read(), readinto() and write() may raise BlockingIOError if the underlying raw stream is in non-blocking mode and not ready; unlike their raw counterparts, they will never return None. A typical implementation should not inherit from a RawIOBase implementation, but wrap one. class IOBase The abstract base class for all I/O classes, acting on streams of bytes. There is no public constructor. This class provides dummy implementations for many methods that derived classes can override selectively; the default implementations represent a file that cannot be read, written or seeked. Even though IOBase does not declare read, readinto, or write because their signatures will vary, implementations and clients should consider those methods part of the interface. Also, implementations may raise UnsupportedOperation when operations they do not support are called. The basic type used for binary data read from or written to a file is bytes. Other bytes-like objects are accepted as method arguments too. In some cases (such as readinto), a writable object is required. Text I/O classes work with str data. Note that calling any method (except additional calls to close(), which are ignored) on a closed stream should raise a ValueError. IOBase (and its subclasses) support the iterator protocol, meaning that an IOBase object can be iterated over yielding the lines in a stream. IOBase also supports the :keyword: with statement. In this example, fp is closed after the suite of the with statement is complete: with open('spam.txt', 'r') as fp: fp.write('Spam and eggs!') class RawIOBase Base class for raw binary I/O. class TextIOBase Base class for text I/O. This class provides a character and line based interface to stream I/O. There is no readinto method because Python's character strings are immutable. There is no public constructor. class UnsupportedOperation This file was automatically generated via lazydocs .","title":"Io"},{"location":"api-docs/io/#module-io","text":"Loading and saving tracking and behavior annotation files","title":"module io"},{"location":"api-docs/io/#global-variables","text":"DEFAULT_BUFFER_SIZE SEEK_SET SEEK_CUR SEEK_END XY_IDS","title":"Global Variables"},{"location":"api-docs/io/#function-read_dlc_tracks","text":"read_DLC_tracks( fn_in:str, part_renamer:dict=None, animal_renamer:dict=None ) \u2192 tuple Read in tracks from DLC. Args: fn_in : csv file that has DLC tracks part_renamer : dictionary to rename body parts, if needed animal_renamer : dictionary to rename animals, if needed Returns: Pandas DataFrame with (n_animals 2 n_body_parts) columns plus with filename and frame, List of body parts, List of animals, Columns names for DLC tracks","title":"function read_DLC_tracks"},{"location":"api-docs/io/#function-rename_df_cols","text":"rename_df_cols(df:DataFrame, renamer:dict) \u2192 DataFrame Rename dataframe columns Args: df : Pandas dataframe whose columns to rename renamer : dictionary whose key:value pairs define the substitutions to make Returns: The dataframe with renamed columns.","title":"function rename_df_cols"},{"location":"api-docs/io/#function-save_dlc_tracks_h5","text":"save_DLC_tracks_h5(df:DataFrame, fn_out:str) \u2192 None Save DLC tracks in h5 format. Args: df : Pandas dataframe to save fn_out : Where to save the dataframe","title":"function save_DLC_tracks_h5"},{"location":"api-docs/io/#function-load_data","text":"load_data(fn:str) Load an object from a pickle file Args: fn : The filename Returns: The pickled object.","title":"function load_data"},{"location":"api-docs/io/#function-read_boris_annotation","text":"read_boris_annotation(fn_in:str, fps:int, duration:float) \u2192 ndarray Read behavior annotation from BORIS exported csv file Args: fn_in : The filename with BORIS behavior annotations to load fps : Frames per second of video duration : Duration of video Returns: A numpy array which indicates, for all frames, if behavior is occuring (1) or not (0)","title":"function read_boris_annotation"},{"location":"api-docs/io/#class-bufferediobase","text":"Base class for buffered IO objects. The main difference with RawIOBase is that the read() method supports omitting the size argument, and does not have a default implementation that defers to readinto(). In addition, read(), readinto() and write() may raise BlockingIOError if the underlying raw stream is in non-blocking mode and not ready; unlike their raw counterparts, they will never return None. A typical implementation should not inherit from a RawIOBase implementation, but wrap one.","title":"class BufferedIOBase"},{"location":"api-docs/io/#class-iobase","text":"The abstract base class for all I/O classes, acting on streams of bytes. There is no public constructor. This class provides dummy implementations for many methods that derived classes can override selectively; the default implementations represent a file that cannot be read, written or seeked. Even though IOBase does not declare read, readinto, or write because their signatures will vary, implementations and clients should consider those methods part of the interface. Also, implementations may raise UnsupportedOperation when operations they do not support are called. The basic type used for binary data read from or written to a file is bytes. Other bytes-like objects are accepted as method arguments too. In some cases (such as readinto), a writable object is required. Text I/O classes work with str data. Note that calling any method (except additional calls to close(), which are ignored) on a closed stream should raise a ValueError. IOBase (and its subclasses) support the iterator protocol, meaning that an IOBase object can be iterated over yielding the lines in a stream. IOBase also supports the :keyword: with statement. In this example, fp is closed after the suite of the with statement is complete: with open('spam.txt', 'r') as fp: fp.write('Spam and eggs!')","title":"class IOBase"},{"location":"api-docs/io/#class-rawiobase","text":"Base class for raw binary I/O.","title":"class RawIOBase"},{"location":"api-docs/io/#class-textiobase","text":"Base class for text I/O. This class provides a character and line based interface to stream I/O. There is no readinto method because Python's character strings are immutable. There is no public constructor.","title":"class TextIOBase"},{"location":"api-docs/io/#class-unsupportedoperation","text":"This file was automatically generated via lazydocs .","title":"class UnsupportedOperation"},{"location":"api-docs/mars_features/","text":"module mars_features function compute_mars_features compute_mars_features( df:DataFrame, raw_col_names:list, animal_setup:dict, **kwargs ) \u2192 DataFrame function make_stacked_features make_stacked_features(train_df, test_df) function compute_mars_features_ compute_mars_features_(df:DataFrame, raw_col_names:list, animal_setup:dict) This file was automatically generated via lazydocs .","title":"Mars features"},{"location":"api-docs/mars_features/#module-mars_features","text":"","title":"module mars_features"},{"location":"api-docs/mars_features/#function-compute_mars_features","text":"compute_mars_features( df:DataFrame, raw_col_names:list, animal_setup:dict, **kwargs ) \u2192 DataFrame","title":"function compute_mars_features"},{"location":"api-docs/mars_features/#function-make_stacked_features","text":"make_stacked_features(train_df, test_df)","title":"function make_stacked_features"},{"location":"api-docs/mars_features/#function-compute_mars_features_","text":"compute_mars_features_(df:DataFrame, raw_col_names:list, animal_setup:dict) This file was automatically generated via lazydocs .","title":"function compute_mars_features_"},{"location":"api-docs/ml/","text":"module ml Machine learning functions This file was automatically generated via lazydocs .","title":"Ml"},{"location":"api-docs/ml/#module-ml","text":"Machine learning functions This file was automatically generated via lazydocs .","title":"module ml"},{"location":"api-docs/video/","text":"module video Basic video tracking and behavior class that houses data Global Variables XY_IDS function clone_metadata clone_metadata(tracking_files:list, **kwargs) \u2192 dict Prepare a metadata dictionary for defining a VideosetDataFrame. Only required argument is list of DLC tracking file names. Any other keyword argument must be either a non-iterable object (e.g. a scalar parameter, like FPS) that will be copied and tagged to each of the DLC tracking files, or an iterable object of the same length of the list of DLC tracking files. Each element in the iterable will be tagged with the corresponding DLC file. Args: tracking_files : List of DLC tracking .csvs **kwargs : described as above Returns: Dictionary whose keys are DLC tracking file names, and contains a dictionary with key,values containing the metadata provided class MLDataFrame DataFrame useful for interfacing between pandas and sklearn. Stores a data table and metadata dictionary. When feature columns, label columns and fold columns are specified then creates properties features, labels, folds and splitter that sklearn accepts for ML. method __init__ __init__( data:DataFrame, metadata:dict={}, fold_cols=None, feature_cols=None, label_cols=None ) property features property folds property labels property splitter method add_data add_data(new_data, col_names) method save save(fn) class VideosetDataFrame method __init__ __init__( metadata:dict, label_key:dict=None, part_renamer:dict=None, animal_renamer:dict=None ) Houses DLC tracking data and behavior annotations in pandas DataFrame for ML, along with relevant metadata, features and behavior annotation labels. Args: metadata : Dictionary whose keys are DLC tracking csvs, and value is a dictionary of associated metadata for that video. Most easiest to create with 'clone_metadata'. Required keys are : ['scale', 'fps', 'units', 'resolution', 'label_files'] label_key : Default None. Dictionary whose keys are behavior labels and values are integers part_renamer : Default None. Dictionary that can rename body parts from tracking files if needed (for feature creation, e.g.) animal_renamer : Default None. Dictionary that re rename animals from tracking files if needed property features property folds property group property labels property n_videos property splitter property videos method add_data add_data(new_data, col_names) method add_features add_features( feature_maker:Features, featureset_name:str, add_to_features=False, **kwargs ) Houses DLC tracking data and behavior annotations in pandas DataFrame for ML, along with relevant metadata Args: featuremaker : (dict) Dictionary whose keys are DLC tracking csvs, and value is a dictionary of associated metadata for that video. Most easiest to create with 'clone_metadata'. Required keys are : ['scale', 'fps', 'units', 'resolution', 'label_files'] label_key : (dict) Default None. Dictionary whose keys are behavior labels and values are integers part_renamer : (dict) Default None. Dictionary that can rename body parts from tracking files if needed (for feature creation, e.g.) Returns: None method make_movie make_movie(prediction_column, fn_out, movie_in) Given a column indicating behavior predictions, make a video outputting those predictiions alongside true labels. method remove_feature_cols remove_feature_cols(col_names) method save save(fn) This file was automatically generated via lazydocs .","title":"Video"},{"location":"api-docs/video/#module-video","text":"Basic video tracking and behavior class that houses data","title":"module video"},{"location":"api-docs/video/#global-variables","text":"XY_IDS","title":"Global Variables"},{"location":"api-docs/video/#function-clone_metadata","text":"clone_metadata(tracking_files:list, **kwargs) \u2192 dict Prepare a metadata dictionary for defining a VideosetDataFrame. Only required argument is list of DLC tracking file names. Any other keyword argument must be either a non-iterable object (e.g. a scalar parameter, like FPS) that will be copied and tagged to each of the DLC tracking files, or an iterable object of the same length of the list of DLC tracking files. Each element in the iterable will be tagged with the corresponding DLC file. Args: tracking_files : List of DLC tracking .csvs **kwargs : described as above Returns: Dictionary whose keys are DLC tracking file names, and contains a dictionary with key,values containing the metadata provided","title":"function clone_metadata"},{"location":"api-docs/video/#class-mldataframe","text":"DataFrame useful for interfacing between pandas and sklearn. Stores a data table and metadata dictionary. When feature columns, label columns and fold columns are specified then creates properties features, labels, folds and splitter that sklearn accepts for ML.","title":"class MLDataFrame"},{"location":"api-docs/video/#method-__init__","text":"__init__( data:DataFrame, metadata:dict={}, fold_cols=None, feature_cols=None, label_cols=None )","title":"method __init__"},{"location":"api-docs/video/#property-features","text":"","title":"property features"},{"location":"api-docs/video/#property-folds","text":"","title":"property folds"},{"location":"api-docs/video/#property-labels","text":"","title":"property labels"},{"location":"api-docs/video/#property-splitter","text":"","title":"property splitter"},{"location":"api-docs/video/#method-add_data","text":"add_data(new_data, col_names)","title":"method add_data"},{"location":"api-docs/video/#method-save","text":"save(fn)","title":"method save"},{"location":"api-docs/video/#class-videosetdataframe","text":"","title":"class VideosetDataFrame"},{"location":"api-docs/video/#method-__init___1","text":"__init__( metadata:dict, label_key:dict=None, part_renamer:dict=None, animal_renamer:dict=None ) Houses DLC tracking data and behavior annotations in pandas DataFrame for ML, along with relevant metadata, features and behavior annotation labels. Args: metadata : Dictionary whose keys are DLC tracking csvs, and value is a dictionary of associated metadata for that video. Most easiest to create with 'clone_metadata'. Required keys are : ['scale', 'fps', 'units', 'resolution', 'label_files'] label_key : Default None. Dictionary whose keys are behavior labels and values are integers part_renamer : Default None. Dictionary that can rename body parts from tracking files if needed (for feature creation, e.g.) animal_renamer : Default None. Dictionary that re rename animals from tracking files if needed","title":"method __init__"},{"location":"api-docs/video/#property-features_1","text":"","title":"property features"},{"location":"api-docs/video/#property-folds_1","text":"","title":"property folds"},{"location":"api-docs/video/#property-group","text":"","title":"property group"},{"location":"api-docs/video/#property-labels_1","text":"","title":"property labels"},{"location":"api-docs/video/#property-n_videos","text":"","title":"property n_videos"},{"location":"api-docs/video/#property-splitter_1","text":"","title":"property splitter"},{"location":"api-docs/video/#property-videos","text":"","title":"property videos"},{"location":"api-docs/video/#method-add_data_1","text":"add_data(new_data, col_names)","title":"method add_data"},{"location":"api-docs/video/#method-add_features","text":"add_features( feature_maker:Features, featureset_name:str, add_to_features=False, **kwargs ) Houses DLC tracking data and behavior annotations in pandas DataFrame for ML, along with relevant metadata Args: featuremaker : (dict) Dictionary whose keys are DLC tracking csvs, and value is a dictionary of associated metadata for that video. Most easiest to create with 'clone_metadata'. Required keys are : ['scale', 'fps', 'units', 'resolution', 'label_files'] label_key : (dict) Default None. Dictionary whose keys are behavior labels and values are integers part_renamer : (dict) Default None. Dictionary that can rename body parts from tracking files if needed (for feature creation, e.g.) Returns: None","title":"method add_features"},{"location":"api-docs/video/#method-make_movie","text":"make_movie(prediction_column, fn_out, movie_in) Given a column indicating behavior predictions, make a video outputting those predictiions alongside true labels.","title":"method make_movie"},{"location":"api-docs/video/#method-remove_feature_cols","text":"remove_feature_cols(col_names)","title":"method remove_feature_cols"},{"location":"api-docs/video/#method-save_1","text":"save(fn) This file was automatically generated via lazydocs .","title":"method save"}]}